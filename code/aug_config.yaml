# Settings to configure OTF image augmentations for lrhr dataloader
# p is always the probability of applying the augmentation
# kernel_size must always be odd
# sigma variables are standard deviation
# Leave variable blank if setting to None
  ColorJitter:
    p: 0.5
    brightness: 0
    contrast: 0
    saturation: 0
    hue: 0
  RandomGaussianNoise:
    p: 0.5
    mean: 0.0
    var_limit: [10.0, 50.0]  # Variance range; 0-255 for sigma_calc 'sig', squared for 'var'
    prob_color: 0.5  # Probability of color rather than grayscale noise
    multi: True
    mode: 'gauss'  # ['gauss' | 'speckle]
    sigma_calc: 'sig'  # ['sig' | 'var']
  RandomPoissonNoise:
    p: 0.5
    prob_color: 0.5  # Probability of color rather than grayscale noise
    scale_range: [0.5, 1.0]  # Range for random selection noise scale
  RandomSPNoise:
    p: 0.5
    prob: 0.1  # Threshold to control level of noise
  RandomSpeckleNoise:  # Just Gaussian noise set to speckle
    p: 0.5
    mean: 0.0
    var_limit: [0.04, 0.12]
    prob_color: 0.5
    sigma_calc: 'var'
  RandomCompression:
    p: 0.5
    min_quality: 20
    max_quality: 90
    compression_type: '.jpg'  # ['.jpg' | '.webp']
  RandomAverageBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
  RandomBilateralBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
    sigmaX: 0.5
    sigmaY: 0.5
  RandomBoxBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
  RandomGaussianBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
    sigmaX: 0.5
    sigmaY: 0.5
  RandomMedianBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
  RandomMotionBlur:
    p: 0.5
    kernel_size: 3  # Maximum kernel size (must be >=3)
    per_channel: False  # Apply motion blur simultaneously or individually per channel
  RandomComplexMotionBlur:
    p: 0.5
    size: [100, 100]
    complexity: 0  # Modifies length and variance of motion blur path (may need to be range 0-1?)
    eps: 0.1  # Small error for numerical stability
  RandomAnIsoBlur:
    p: 0.5
    min_kernel_size: 1
    kernel_size: 3  # Maximum kernel size (must be >=3)
    sigmaX: 0.5
    sigmaY: 0.5
    angle:  # Rotation angle for anisotropic filters
    noise:  # Multiplicative kernel noise
    scale: 1  # To prevent filter misalignment (i.e. with nearest neighbor); scale 1 does not shift pixels
  RandomSincBlur:
    p: 0.5
    min_kernel_size: 7
    kernel_size: 21  # Maximum kernel size (must be >=3)
    min_cutoff:  # Minimum omega cutoff frequency in radians (max: pi)
  BayerDitherNoise:
    p: 0.5
  FSDitherNoise:
    p: 0.5
  FilterMaxRGB:
    p: 0.5
  FilterColorBalance:
    p: 0.5
    percent: 1  # Amount of balance to apply
    random_params: False  # If true, randomizes percent from 0 to percent
  FilterUnsharp:
    p: 0.5
    blur_algo: 'median'  # ['median' | None]; only used for 'laplacian'
    kernel_size:  # Leave blank to select randomly from [1, 3, 5]
    strength: 0.3  # Strength of filter applied (range 0-1)
    unsharp_algo: 'laplacian'  # ['DoG' | 'laplacian]
  FilterCanny:
    p: 0.5
    sigma: 0.33
    bin_thresh: False  # Flag to apply binarize operation
    threshold: 127  # Cutoff value for binarize (0-255)
  SimpleQuantize:
    p: 0.5
    rgb_range: 40  # Higher values increase value range contained in each bin (1-255)
  KMeansQuantize:
    p: 0.5
    n_colors: 128  # Number of colors in quantized image (1-255)
  CLAHE:  # Contrast-Limited Adaptive Histogram Equalization
    p: 0.5
    clip_limit: 4.0  # Upper threshold value for contrast limiting (min 1)
    tile_grid_size: [8, 8]
  RandomGamma:
    p: 0.5
    gamma_range: [80, 120]  #  Range to randomly select gamma from
    gain: 1  # Constant multiplier for gamma adjustment
  Superpixels:
    p: 0.5
    p_replace: 0.1  # Probability for any segment of pixels within being replaced by their aggregate color
    n_segments: 100  # Approximate target of number of superpixels to generate
    cs:  # Colorspace conversion; ['lab' | 'hsv' | None]
    algo: 'slic'  # Superpixels algorithm; ['seeds' | 'slic' | 'slico' | 'mslic' | 'sk_slic' | 'sk_felzenszwalb']
    n_iters: 10  # Only applies for certain algorithms
    kind: 'mix'  # How to aggregate colors; ['avg' | 'median' | 'mix']
    reduction:  # Post-process segment to reduce colors for algos that produce more than n_segments (sk_felzenszwalb); ['selective' | 'cluster' | 'rag']
    max_size: 128  # Max image size at which augmentation applied, will be downscaled if necessary [int or None]
    interpolation: 'BILINEAR'  # ['NEAREST' | 'BILINEAR' | 'AREA' | 'BICUBIC' | 'LANCZOS']
  RandomCameraNoise:
    p: 0.5
    demosaic_fn: 'malvar'  # ['malvar' | 'pixelshuffle' | 'menon' | 'bilinear']
    xyz_arr: 'D50'  # Matrix to use for RGB to XYZ conversion; ['D50 | 'D65']
    rg_range: [1.2, 2.4]  # Red gain range for white balance
    bg_range: [1.2, 2.4]  # Blue gain range for white balance
    random_params: False  # Initialize with random parameters if True